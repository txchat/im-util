// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	Ping
	Pang
	EchoMsg
	PingLog
	PangLog
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoOp int32

const (
	EchoOp_Undefined  EchoOp = 0
	EchoOp_PingAction EchoOp = 1
	EchoOp_PangAction EchoOp = 2
)

var EchoOp_name = map[int32]string{
	0: "Undefined",
	1: "PingAction",
	2: "PangAction",
}
var EchoOp_value = map[string]int32{
	"Undefined":  0,
	"PingAction": 1,
	"PangAction": 2,
}

func (x EchoOp) String() string {
	return proto.EnumName(EchoOp_name, int32(x))
}
func (EchoOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Ping struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ping) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Pang struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Pang) Reset()                    { *m = Pang{} }
func (m *Pang) String() string            { return proto.CompactTextString(m) }
func (*Pang) ProtoMessage()               {}
func (*Pang) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pang) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoMsg struct {
	// Types that are valid to be assigned to Value:
	//	*EchoMsg_Ping
	//	*EchoMsg_Pang
	Value isEchoMsg_Value `protobuf_oneof:"value"`
	Ty    int32           `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *EchoMsg) Reset()                    { *m = EchoMsg{} }
func (m *EchoMsg) String() string            { return proto.CompactTextString(m) }
func (*EchoMsg) ProtoMessage()               {}
func (*EchoMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isEchoMsg_Value interface {
	isEchoMsg_Value()
}

type EchoMsg_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=ping,oneof"`
}
type EchoMsg_Pang struct {
	Pang *Pang `protobuf:"bytes,2,opt,name=pang,oneof"`
}

func (*EchoMsg_Ping) isEchoMsg_Value() {}
func (*EchoMsg_Pang) isEchoMsg_Value() {}

func (m *EchoMsg) GetValue() isEchoMsg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EchoMsg) GetPing() *Ping {
	if x, ok := m.GetValue().(*EchoMsg_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *EchoMsg) GetPang() *Pang {
	if x, ok := m.GetValue().(*EchoMsg_Pang); ok {
		return x.Pang
	}
	return nil
}

func (m *EchoMsg) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EchoMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EchoMsg_OneofMarshaler, _EchoMsg_OneofUnmarshaler, _EchoMsg_OneofSizer, []interface{}{
		(*EchoMsg_Ping)(nil),
		(*EchoMsg_Pang)(nil),
	}
}

func _EchoMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EchoMsg)
	// value
	switch x := m.Value.(type) {
	case *EchoMsg_Ping:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *EchoMsg_Pang:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pang); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EchoMsg.Value has unexpected type %T", x)
	}
	return nil
}

func _EchoMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EchoMsg)
	switch tag {
	case 1: // value.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Value = &EchoMsg_Ping{msg}
		return true, err
	case 2: // value.pang
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pang)
		err := b.DecodeMessage(msg)
		m.Value = &EchoMsg_Pang{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EchoMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EchoMsg)
	// value
	switch x := m.Value.(type) {
	case *EchoMsg_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EchoMsg_Pang:
		s := proto.Size(x.Pang)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PingLog struct {
	Msg  string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Echo string `protobuf:"bytes,2,opt,name=echo" json:"echo,omitempty"`
}

func (m *PingLog) Reset()                    { *m = PingLog{} }
func (m *PingLog) String() string            { return proto.CompactTextString(m) }
func (*PingLog) ProtoMessage()               {}
func (*PingLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PingLog) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

type PangLog struct {
	Msg  string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Echo string `protobuf:"bytes,2,opt,name=echo" json:"echo,omitempty"`
}

func (m *PangLog) Reset()                    { *m = PangLog{} }
func (m *PangLog) String() string            { return proto.CompactTextString(m) }
func (*PangLog) ProtoMessage()               {}
func (*PangLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PangLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PangLog) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "types.Ping")
	proto.RegisterType((*Pang)(nil), "types.Pang")
	proto.RegisterType((*EchoMsg)(nil), "types.EchoMsg")
	proto.RegisterType((*PingLog)(nil), "types.PingLog")
	proto.RegisterType((*PangLog)(nil), "types.PangLog")
	proto.RegisterEnum("types.EchoOp", EchoOp_name, EchoOp_value)
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x3f, 0x4b, 0xc6, 0x30,
	0x10, 0x87, 0x9b, 0xf4, 0x1f, 0xbd, 0x62, 0x29, 0x99, 0x32, 0xd6, 0x4e, 0xc5, 0xa1, 0x82, 0x0e,
	0xce, 0x0a, 0x82, 0x83, 0xa2, 0x04, 0xfc, 0x00, 0xb1, 0x8d, 0x69, 0x40, 0x93, 0x60, 0xa3, 0xd0,
	0x6f, 0x2f, 0x39, 0xe5, 0x85, 0x17, 0xba, 0xbc, 0xdb, 0x1d, 0xcf, 0xef, 0x9e, 0xcb, 0x05, 0x40,
	0x4d, 0x8b, 0x1b, 0xfd, 0x97, 0x0b, 0x8e, 0xe5, 0x61, 0xf3, 0x6a, 0xed, 0x39, 0x64, 0x2f, 0xc6,
	0x6a, 0xd6, 0x42, 0xfa, 0xb9, 0x6a, 0x4e, 0x3a, 0x32, 0x54, 0x22, 0x96, 0x48, 0xe4, 0x2e, 0x59,
	0xa0, 0xbc, 0x9f, 0x16, 0xf7, 0xb4, 0x6a, 0x76, 0x0e, 0x99, 0x37, 0xf6, 0x8f, 0xd6, 0x57, 0xf5,
	0x88, 0xd2, 0x31, 0x1a, 0x1f, 0x12, 0x81, 0x08, 0x23, 0xd2, 0x6a, 0x4e, 0x8f, 0x23, 0xf2, 0x3f,
	0x12, 0x57, 0x34, 0x40, 0xc3, 0xc6, 0xd3, 0x8e, 0x0c, 0xb9, 0xa0, 0x61, 0xbb, 0x2b, 0x21, 0xff,
	0x91, 0x1f, 0xdf, 0xaa, 0xbf, 0x84, 0x32, 0xba, 0x1e, 0xdd, 0xce, 0x33, 0x18, 0x83, 0x2c, 0xde,
	0x83, 0xe2, 0x4a, 0x60, 0x8d, 0x03, 0xf2, 0x84, 0x81, 0x8b, 0x1b, 0x28, 0xe2, 0x2d, 0xcf, 0x9e,
	0x9d, 0x41, 0xf5, 0x6a, 0x67, 0xf5, 0x6e, 0xac, 0x9a, 0xdb, 0x84, 0x35, 0x00, 0x71, 0xf5, 0xed,
	0x14, 0x8c, 0xb3, 0x2d, 0xc1, 0x5e, 0x1e, 0x7a, 0xfa, 0x56, 0xe0, 0x37, 0x5e, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x21, 0x88, 0x7c, 0x22, 0x54, 0x01, 0x00, 0x00,
}
